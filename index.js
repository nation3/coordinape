"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertCoordinapePayouts = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const GuildBudget_1 = require("./GuildBudget");
const csv = require('csv-parser');
function convertCoordinapePayouts(circlesDir = 'coordinape-circles') {
    console.log('convertCoordinapePayouts');
    // For each guild, iterate the CSV files generated by Coordinape
    console.log(`circlesDir: "${circlesDir}"`);
    fs.readdir(circlesDir, function (err, files) {
        if (err) {
            console.error(err);
            return;
        }
        files.forEach(function (dir) {
            const circleDir = path.join(circlesDir, dir);
            console.log(`\ncircleDir: "${circleDir}"`);
            // Get the guild's budget
            let guildBudget;
            for (let property in GuildBudget_1.GuildBudget) {
                if (circleDir.replaceAll('-', '').endsWith(property.toLowerCase())) {
                    guildBudget = GuildBudget_1.GuildBudget[property];
                    break;
                }
            }
            console.log('guildBudget:', guildBudget);
            if (guildBudget == undefined) {
                console.error('No matching guild name found: ' + circleDir);
                return;
            }
            // Iterate the guild's CSV files
            fs.readdir(circleDir, function (err, files) {
                files.forEach(function (file) {
                    const filePath = path.join(circleDir, file);
                    console.log(`filePath: "${filePath}"`);
                    if (filePath.endsWith('.csv')
                        && !filePath.endsWith('_disperse.csv')
                        && !filePath.endsWith('_gnosis.csv')) {
                        // Read the rows of data from the CSV file
                        const csvRows = [];
                        fs.createReadStream(filePath)
                            .pipe(csv(['No', 'name', 'address', 'received', 'sent', 'epoch_number', 'Date']))
                            .on('data', (row) => csvRows.push(row))
                            .on('end', () => {
                            console.log('\nfilePath', filePath);
                            console.log('csvRows:\n', csvRows);
                            // TODO
                        });
                    }
                });
            });
        });
    });
}
exports.convertCoordinapePayouts = convertCoordinapePayouts;
convertCoordinapePayouts();
