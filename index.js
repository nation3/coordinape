"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertCoordinapePayouts = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const GuildBudget_1 = require("./GuildBudget");
const csvParser = require('csv-parser');
const csvWriter = require('csv-writer');
function convertCoordinapePayouts(circlesDir = 'coordinape-circles') {
    console.log('convertCoordinapePayouts');
    // For each guild, iterate the CSV files generated by Coordinape
    console.log(`circlesDir: "${circlesDir}"`);
    fs.readdir(circlesDir, function (err, files) {
        if (err) {
            console.error(err);
            return;
        }
        files.forEach(function (dir) {
            const circleDir = path.join(circlesDir, dir);
            console.log(`\ncircleDir: "${circleDir}"`);
            // Get the guild's budget
            let guildBudget = 0;
            for (let guildName in GuildBudget_1.GuildBudget) {
                if (circleDir.replaceAll('-', '').endsWith(guildName.toLowerCase())) {
                    guildBudget = Number(GuildBudget_1.GuildBudget[guildName]);
                    break;
                }
            }
            console.log('guildBudget:', guildBudget);
            if (guildBudget == 0) {
                console.error('No budget found for guild: ' + circleDir);
                return;
            }
            // Iterate the guild's CSV files
            fs.readdir(circleDir, function (err, files) {
                files.forEach(function (file) {
                    const filePath = path.join(circleDir, file);
                    console.log(`filePath: "${filePath}"`);
                    if (filePath.endsWith('.csv')
                        && !filePath.endsWith('_disperse.csv')
                        && !filePath.endsWith('_gnosis.csv')) {
                        // Read the rows of data from the CSV file
                        const csvRows = [];
                        fs.createReadStream(filePath)
                            .pipe(csvParser({
                            headers: ['No', 'name', 'address', 'received', 'sent', 'epoch_number', 'Date'],
                            skipLines: 1
                        }))
                            .on('data', (row) => csvRows.push(row))
                            .on('end', () => {
                            console.log('\nfilePath', filePath);
                            console.log('csvRows:\n', csvRows);
                            // Generate CSV for Disperse.app
                            const filePathDisperse = filePath.replace('.csv', '_disperse.csv');
                            console.log('filePathDisperse', filePathDisperse);
                            writeToDisperseCSV(guildBudget, filePathDisperse, csvRows);
                            // Generate CSV for Gnosis Safe
                            const filePathGnosis = filePath.replace('.csv', '_gnosis.csv');
                            console.log('filePathGnosis', filePathGnosis);
                            writeToGnosisCSV(guildBudget, filePathGnosis, csvRows);
                        });
                    }
                });
            });
        });
    });
}
exports.convertCoordinapePayouts = convertCoordinapePayouts;
convertCoordinapePayouts();
function writeToDisperseCSV(guildBudget, filePathDisperse, csvRows) {
    console.log('writeToDisperseCSV');
    // Calculate total amount of Coordinape Circle tokens allocated
    let totalCircleTokensAllocated = 0;
    csvRows.forEach(function (row) {
        totalCircleTokensAllocated += Number(row.received);
    });
    console.log('totalCircleTokensAllocated:', totalCircleTokensAllocated);
    // Set column names
    const writer = csvWriter.createObjectCsvWriter({
        path: filePathDisperse,
        header: ['address', 'received']
    });
    // Set $NATION amount to match the percentage of total Circle tokens allocated
    csvRows.forEach(function (row) {
        row.received = (row.received / totalCircleTokensAllocated) * guildBudget;
    });
    writer.writeRecords(csvRows);
}
function writeToGnosisCSV(guildBudget, filePathGnosis, csvRows) {
    console.log('writeToGnosisCSV');
    // Calculate total amount of Coordinape Circle tokens allocated
    let totalCircleTokensAllocated = 0;
    csvRows.forEach(function (row) {
        totalCircleTokensAllocated += Number(row.received);
    });
    console.log('totalCircleTokensAllocated:', totalCircleTokensAllocated);
    // Set column names
    csvRows.forEach(function (row) {
        row.token_type = 'erc20';
        row.token_address = '0x333A4823466879eeF910A04D473505da62142069';
        row.receiver = row.address;
        row.amount = row.received;
    });
    // Set $NATION amount to match the percentage of total Circle tokens allocated
    csvRows.forEach(function (row) {
        row.amount = (row.amount / totalCircleTokensAllocated) * guildBudget;
    });
    const writer = csvWriter.createObjectCsvWriter({
        path: filePathGnosis,
        header: [
            { id: 'token_type', title: 'token_type' },
            { id: 'token_address', title: 'token_address' },
            { id: 'receiver', title: 'receiver' },
            { id: 'amount', title: 'amount' },
            { id: 'id', title: 'id' }
        ]
    });
    writer.writeRecords(csvRows);
}
