import * as fs from 'fs'
import * as path from 'path'
import * as csvParser from 'csv-parser'
import { GuildBudget } from './GuildBudget'

const csv = require('csv-parser')

export function convertCoordinapePayouts(circlesDir: string = 'coordinape-circles') {
    console.log('convertCoordinapePayouts')

    // For each guild, iterate the CSV files generated by Coordinape
    console.log(`circlesDir: "${circlesDir}"`)
    fs.readdir(circlesDir, function(err, files) {
        if (err) {
            console.error(err)
            return
        }

        files.forEach(function(dir) {
            const circleDir = path.join(circlesDir, dir)
            console.log(`\ncircleDir: "${circleDir}"`)

            // Get the guild's budget
            let guildBudget;
            for (let guildName in GuildBudget) {
                if (circleDir.replaceAll('-', '').endsWith(guildName.toLowerCase())) {
                    guildBudget = GuildBudget[guildName]
                    break
                }
            }
            console.log('guildBudget:', guildBudget)
            if (guildBudget == undefined) {
                console.error('No matching guild name found: ' + circleDir)
                return
            }
            
            // Iterate the guild's CSV files
            fs.readdir(circleDir, function(err, files) {
                files.forEach(function(file) {
                    const filePath = path.join(circleDir, file)
                    console.log(`filePath: "${filePath}"`)
                    if (filePath.endsWith('.csv') 
                            && !filePath.endsWith('_disperse.csv') 
                            && !filePath.endsWith('_gnosis.csv')) {
                        // Read the rows of data from the CSV file
                        const csvRows: any[] = []
                        fs.createReadStream(filePath)
                            .pipe(csv(['No', 'name', 'address', 'received', 'sent', 'epoch_number', 'Date']))
                            .on('data', (row: any) => csvRows.push(row))
                            .on('end', () => {
                                console.log('\nfilePath', filePath)
                                console.log('csvRows:\n', csvRows)

                                // TODO
                            })
                    }
                })
            })
        })
    })
}

convertCoordinapePayouts()
